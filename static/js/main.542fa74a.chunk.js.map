{"version":3,"sources":["components/Display/SettingsMode/SettingsMode.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/Display/CountMode/CountMode.module.css","components/Display/SettingsMode/ErrorMessage/ErrorMessage.module.css","components/Counter/Counter.module.css","components/ButtonGroup/ButtonGroup.module.css","App.module.css","components/Display/CountMode/CountMode.tsx","components/Display/SettingsMode/ErrorMessage/ErrorMessage.tsx","components/Display/SettingsMode/SettingsMode.tsx","components/Display/Dispaly.tsx","components/Button/Button.tsx","components/ButtonGroup/SettingsButton/SettingsButton.tsx","components/ButtonGroup/CounterButton/CounterButton.tsx","components/ButtonGroup/ButtonGroup.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CountMode","count","mode","maxValue","className","s","ErrorMessage","message","errorMessage","SettingsMode","minValue","error","setMaxValueCallback","setMinValueCallback","setErrorCallback","inputClass","length","inputError","inputCorrect","changeValue","e","input","currentTarget","value","name","settingsContainer","label","htmlFor","join","type","onChange","Display","interfaceMode","displayContainer","Button","text","setCountCallback","disabled","setInterfaceModeCallback","buttonCommon","onClick","changeInterface","sessionStorage","setItem","SettingsButton","CounterButton","ButtonGroup","buttonsContainer","Counter","counterContainer","App","startMinValue","startMaxValue","minData","getItem","maxData","useState","setMinValue","setMaxValue","setCount","setError","setInterfaceMode","appContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.542fa74a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsMode_settingsContainer__3GSCk\",\"label\":\"SettingsMode_label__1fYMT\",\"input\":\"SettingsMode_input__NfgTE\",\"inputCorrect\":\"SettingsMode_inputCorrect__sXSQd\",\"inputError\":\"SettingsMode_inputError__3sglA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonCommon\":\"Button_buttonCommon__3HvzX\",\"active\":\"Button_active__TCjlx\",\"disabled\":\"Button_disabled__2c3jr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Display_displayContainer__3YmLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"CountMode_count__YIeeu\",\"redCount\":\"CountMode_redCount__2OfuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__1oR2b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__1qHAn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"ButtonGroup_buttonsContainer__1G_1Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__3jRx1\"};","import React from 'react'\nimport s from './CountMode.module.css'\n\ntype CountModeType = {\n    count: number\n    maxValue: number\n}\n\nexport const CountMode: React.FC<CountModeType> = ({ count, maxValue }) => {\n    const mode = count < maxValue ? 'count' : 'redCount'\n    return (\n        <p className={ s[ `${ mode }` ] }>{ count }</p>\n    )\n}","import React from 'react'\nimport s from './ErrorMessage.module.css'\n\ntype ErrorMessageType = {\n    message: string\n}\n\nexport const ErrorMessage: React.FC<ErrorMessageType> = ({ message }) => {\n    return <p className={ s.errorMessage }>{ message }</p>\n}","import React, { ChangeEvent } from 'react'\nimport s from './SettingsMode.module.css'\nimport { ErrorMessage } from './ErrorMessage/ErrorMessage'\n\ntype SettingsModeType = {\n    minValue: number\n    maxValue: number\n    error: string\n    setErrorCallback: (error: string) => void\n    setMinValueCallback: (value: number) => void\n    setMaxValueCallback: (value: number) => void\n}\n\nexport const SettingsMode: React.FC<SettingsModeType> = (\n    {\n        minValue, maxValue, error,\n        setMaxValueCallback, setMinValueCallback,\n        setErrorCallback,\n    }) => {\n    const inputClass = error.length ? s.inputError : s.inputCorrect\n\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setErrorCallback('')\n        const input = e.currentTarget\n        if (+input.value < 0) {\n            setErrorCallback(`${ e.currentTarget.name } must be positive or 0`)\n            return\n        }\n\n        switch (input.name) {\n            case 'min value':\n                +input.value < maxValue\n                    ? setMinValueCallback(+input.value)\n                    : setErrorCallback(`${ input.name } must be less than ${ maxValue }`)\n                break\n            case 'max value':\n                +input.value > minValue\n                    ? setMaxValueCallback(+input.value)\n                    : setErrorCallback(`${ input.name } must be more than ${ minValue }`)\n                break\n        }\n    }\n\n    return (\n        <>\n            <form className={ s.settingsContainer }>\n                <label\n                    className={ s.label }\n                    htmlFor={ 'min value' }\n                >Min value:\n                </label>\n                <input\n                    className={ [s.input, inputClass].join(' ') }\n                    name={ 'min value' }\n                    type={ 'number' }\n                    value={ minValue }\n                    onChange={ changeValue }\n                />\n                <label\n                    className={ s.label }\n                    htmlFor={ 'min value' }\n                >Max value:\n                </label>\n                <input\n                    className={ [s.input, inputClass].join(' ') }\n                    name={ 'max value' }\n                    type={ 'number' }\n                    value={ maxValue }\n                    onChange={ changeValue }\n                />\n            </form>\n            <ErrorMessage message={ error }/>\n        </>\n    )\n}","import React from 'react'\nimport s from './Display.module.css'\nimport { InterfaceType } from '../../App'\nimport { CountMode } from './CountMode/CountMode'\nimport { SettingsMode } from './SettingsMode/SettingsMode'\n\ntype DisplayTypes = {\n    count: number\n    minValue: number\n    maxValue: number\n    interfaceMode: InterfaceType\n    error: string\n    setErrorCallback: (error: string) => void\n    setMinValueCallback: (value: number) => void\n    setMaxValueCallback: (value: number) => void\n}\n\n\nexport const Display: React.FC<DisplayTypes> = (\n    {\n        count, maxValue, minValue,\n        interfaceMode, error,\n        setMinValueCallback, setMaxValueCallback,\n        setErrorCallback,\n    }) => {\n\n    return (\n        <div className={ s.displayContainer }>\n            { interfaceMode === 'counter'\n                ? <CountMode\n                    count={ count }\n                    maxValue={ maxValue }\n                />\n                : <SettingsMode\n                    minValue={ minValue }\n                    maxValue={ maxValue }\n                    error={ error }\n                    setErrorCallback={ setErrorCallback }\n                    setMinValueCallback={ setMinValueCallback }\n                    setMaxValueCallback={ setMaxValueCallback }\n                />\n            }\n        </div>\n    )\n}","import React from 'react'\nimport s from './Button.module.css'\nimport { InterfaceType } from '../../App'\n\ntype ButtonTypes = {\n    type: 'inc' | 'reset' | 'set'\n    text: string\n    disabled?: boolean\n    count: number\n    minValue: number\n    maxValue: number\n    interfaceMode: InterfaceType\n    setCountCallback?: (count: number) => void\n    setInterfaceModeCallback?: (mode: InterfaceType) => void\n}\n\nexport const Button: React.FC<ButtonTypes> = (\n    {\n        count, type, text,\n        setCountCallback,\n        minValue, maxValue, disabled,\n        setInterfaceModeCallback, interfaceMode,\n\n    }) => {\n    let mode = (count > minValue && type === 'reset') ? 'active' :\n        (count < maxValue && type === 'inc') ? 'active' :\n            (type === 'set' && !disabled) ? 'active' : 'disabled'\n\n\n    const onClickHandler = () => {\n        switch (type) {\n            case 'inc':\n                setCountCallback && setCountCallback(++count)\n                break\n            case 'reset':\n                setCountCallback && setCountCallback(minValue)\n                break\n            case 'set':\n                const changeInterface = interfaceMode === 'counter'\n                    ? 'settings' : 'counter'\n                setCountCallback && setCountCallback(minValue)\n                sessionStorage.setItem('minValue', `${ minValue }`)\n                sessionStorage.setItem('maxValue', `${ maxValue }`)\n                setInterfaceModeCallback && setInterfaceModeCallback(changeInterface)\n                break\n        }\n    }\n\n    return (\n        <button\n            className={ [s.buttonCommon, s[ `${ mode }` ]].join(' ') }\n            onClick={ onClickHandler }\n            disabled={ mode === 'disabled' }\n        >\n            { text }\n        </button>\n    )\n}","import React from 'react'\nimport { InterfaceType } from '../../../App'\nimport { Button } from '../../Button/Button'\n\ntype SettingsButtonType = {\n    interfaceMode: InterfaceType\n    count: number\n    error?: string\n    minValue: number\n    maxValue: number\n    setCountCallback?: (value: number) => void\n    setInterfaceModeCallback: (mode: InterfaceType) => void\n}\n\nexport const SettingsButton: React.FC<SettingsButtonType> = (\n    {\n        interfaceMode, count,\n        minValue, maxValue,\n        setInterfaceModeCallback, error, setCountCallback,\n    }) => {\n    return (\n        <Button\n            text={ 'set' }\n            type={ 'set' }\n            disabled={ !!error?.length }\n            interfaceMode={ interfaceMode }\n            count={ count }\n            minValue={ minValue }\n            maxValue={ maxValue }\n            setCountCallback={ setCountCallback }\n            setInterfaceModeCallback={ setInterfaceModeCallback }\n        />\n    )\n}","import React from 'react'\nimport { InterfaceType } from '../../../App'\nimport { Button } from '../../Button/Button'\nimport { SettingsButton } from '../SettingsButton/SettingsButton'\n\ntype CounterButtonType = {\n    interfaceMode: InterfaceType\n    count: number\n    minValue: number\n    maxValue: number\n    setCountCallback: (value: number) => void\n    setInterfaceModeCallback: (mode: InterfaceType) => void\n}\n\nexport const CounterButton: React.FC<CounterButtonType> = (\n    {\n        interfaceMode, count,\n        minValue, maxValue,\n        setCountCallback, setInterfaceModeCallback\n    }) => {\n    return (\n        <>\n            <Button\n                text={ 'inc' }\n                type={ 'inc' }\n                count={ count }\n                interfaceMode={ interfaceMode }\n                setCountCallback={ setCountCallback }\n                minValue={ minValue }\n                maxValue={ maxValue }\n            />\n            <Button\n                text={ 'reset' }\n                type={ 'reset' }\n                count={ count }\n                interfaceMode={ interfaceMode }\n                setCountCallback={ setCountCallback }\n                minValue={ minValue }\n                maxValue={ maxValue }\n            />\n            <SettingsButton\n                interfaceMode={ interfaceMode }\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                setInterfaceModeCallback={ setInterfaceModeCallback }\n            />\n        </>\n    )\n}","import React from 'react'\nimport { InterfaceType } from '../../App'\nimport s from './ButtonGroup.module.css'\nimport { SettingsButton } from './SettingsButton/SettingsButton'\nimport { CounterButton } from './CounterButton/CounterButton'\n\ntype ButtonGroupType = {\n    interfaceMode: InterfaceType\n    count: number\n    error: string\n    minValue: number\n    maxValue: number\n    setCountCallback: (count: number) => void\n    setInterfaceModeCallback: (mode: InterfaceType) => void\n}\n\nexport const ButtonGroup: React.FC<ButtonGroupType> = (\n    {\n        interfaceMode, count, error,\n        setCountCallback, minValue, maxValue,\n        setInterfaceModeCallback,\n    }) => {\n    return (\n        <div className={ s.buttonsContainer }>\n            {\n                interfaceMode === 'counter'\n                    ? <CounterButton interfaceMode={ interfaceMode }\n                                     count={ count }\n                                     minValue={ minValue }\n                                     maxValue={ maxValue }\n                                     setCountCallback={ setCountCallback }\n                                     setInterfaceModeCallback={ setInterfaceModeCallback }/>\n                    : <SettingsButton\n                        error={ error }\n                        interfaceMode={ interfaceMode }\n                        count={ count }\n                        minValue={ minValue }\n                        maxValue={ maxValue }\n                        setCountCallback={ setCountCallback }\n                        setInterfaceModeCallback={ setInterfaceModeCallback }\n                    />\n            }\n        </div>\n    )\n}","import React from 'react'\nimport { Display } from '../Display/Dispaly'\nimport s from './Counter.module.css'\nimport { InterfaceType } from '../../App'\nimport { ButtonGroup } from '../ButtonGroup/ButtonGroup'\n\ntype CounterTypes = {\n    count: number\n    minValue: number\n    maxValue: number\n    interfaceMode: InterfaceType\n    error: string\n    setErrorCallback: (error: string) => void\n    setCountCallback: (count: number) => void\n    setMinValueCallback: (value: number) => void\n    setMaxValueCallback: (value: number) => void\n    setInterfaceModeCallback: (mode: InterfaceType) => void\n}\n\n\nexport const Counter: React.FC<CounterTypes> = (\n    {\n        count, minValue, maxValue,\n        interfaceMode, error,\n        setMinValueCallback, setMaxValueCallback,\n        setCountCallback, setInterfaceModeCallback,\n        setErrorCallback,\n    }) => {\n    return (\n        <div className={ s.counterContainer }>\n            <Display\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                interfaceMode={ interfaceMode }\n                error={ error }\n                setErrorCallback={ setErrorCallback }\n                setMinValueCallback={ setMinValueCallback }\n                setMaxValueCallback={ setMaxValueCallback }\n            />\n            <ButtonGroup\n                interfaceMode={ interfaceMode }\n                count={ count }\n                error={ error }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                setCountCallback={ setCountCallback }\n                setInterfaceModeCallback={ setInterfaceModeCallback }\n            />\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Counter } from './components/Counter/Counter'\nimport s from './App.module.css'\n\ntype AppProps = {\n    startMinValue: number\n    startMaxValue: number\n}\n\nexport type InterfaceType = 'counter' | 'settings'\n\nexport const App: React.FC<AppProps> = ({ startMinValue, startMaxValue }) => {\n    let minData = sessionStorage.getItem('minValue') ? sessionStorage.getItem('minValue') as string : startMinValue\n    let maxData = sessionStorage.getItem('maxValue') ? sessionStorage.getItem('maxValue') as string : startMaxValue\n\n    const [minValue, setMinValue] = useState<number>(+minData)\n    const [maxValue, setMaxValue] = useState<number>(+maxData)\n    const [count, setCount] = useState<number>(minValue)\n    const [error, setError] = useState<string>('')\n    const [interfaceMode, setInterfaceMode] = useState<InterfaceType>('counter')\n\n    return (\n        <div className={ s.appContainer }>\n            <Counter\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                interfaceMode={ interfaceMode }\n                error={ error }\n                setErrorCallback={ setError }\n                setCountCallback={ setCount }\n                setMinValueCallback={ setMinValue }\n                setMaxValueCallback={ setMaxValue }\n                setInterfaceModeCallback={ setInterfaceMode }\n            />\n        </div>\n    )\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nexport const minValue = 0\nexport const maxValue = 5\n\nReactDOM.render(\n    <React.StrictMode>\n        <App startMinValue={ minValue } startMaxValue={ maxValue }/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}