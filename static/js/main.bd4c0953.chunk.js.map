{"version":3,"sources":["components/Display/SettingsMode/SettingsMode.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/Display/CountMode/CountMode.module.css","components/Display/SettingsMode/ErrorMessage/ErrorMessage.module.css","components/Counter/Counter.module.css","components/ButtonGroup/ButtonGroup.module.css","App.module.css","store/types/counter.ts","store/reducers/counter.ts","store/reducers/index.ts","store/actions/counter.ts","store/middlewares/counter.ts","store/index.ts","store/selectors/counter.ts","components/Display/CountMode/CountMode.tsx","components/Display/SettingsMode/ErrorMessage/ErrorMessage.tsx","components/Display/SettingsMode/SettingsMode.tsx","components/Display/Dispaly.tsx","components/Button/Button.tsx","components/ButtonGroup/SettingsButton/SettingsButton.tsx","components/ButtonGroup/CounterButton/CounterButtons.tsx","components/ButtonGroup/ButtonGroup.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SET_MIN_VALUE","SET_MAX_VALUE","SAVE_SETTINGS","SET_ERROR_MESSAGE","CLEAR_ERROR_MESSAGE","VALIDATE_VALUE","SET_INTERFACE_MODE","SET_COUNT","INCREMENT_COUNT","initialState","minValue","localStorage","getItem","maxValue","count","errorMessage","interfaceMode","combineReducers","counter","state","action","type","types","payload","setItem","toString","setCount","errorMessages","validateValue","value","name","number","parseInt","isNaN","newMinValue","newMaxValue","useAppDispatch","useDispatch","store","createStore","rootReducers","applyMiddleware","next","getState","actions","counterSelector","interfaceModeSelector","errorMessageSelector","CountMode","React","memo","useSelector","mode","className","s","ErrorMessage","SettingsMode","dispatch","inputClass","inputError","inputCorrect","changeValue","e","currentTarget","settingsContainer","label","htmlFor","input","join","onChange","Display","displayContainer","Button","isDisabled","setCountCallback","incrementCountCallback","setInterfaceModeCallback","saveSettingsToLocalStorageCallback","buttonCommon","onClick","disabled","SettingsButton","length","CounterButtons","ButtonGroup","buttonsContainer","Counter","counterContainer","App","appContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4c0953.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SettingsMode_label__1fYMT\",\"input\":\"SettingsMode_input__NfgTE\",\"inputCorrect\":\"SettingsMode_inputCorrect__sXSQd\",\"inputError\":\"SettingsMode_inputError__3sglA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonCommon\":\"Button_buttonCommon__3HvzX\",\"active\":\"Button_active__TCjlx\",\"disabled\":\"Button_disabled__2c3jr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Display_displayContainer__3YmLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"CountMode_count__YIeeu\",\"redCount\":\"CountMode_redCount__2OfuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__1oR2b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__1qHAn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"ButtonGroup_buttonsContainer__1G_1Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__3jRx1\"};","// Settings mode\nexport const SET_MIN_VALUE = 'SETTINGS/SET-MIN-VALUE'\nexport const SET_MAX_VALUE = 'SETTINGS/SET-MAX-VALUE'\nexport const SAVE_SETTINGS = 'SETTINGS/SAVE-SETTINGS'\nexport const SET_ERROR_MESSAGE = 'SETTINGS/SET-ERROR-MESSAGE'\nexport const CLEAR_ERROR_MESSAGE = 'SETTINGS/CLEAR-ERROR-MESSAGE'\nexport const VALIDATE_VALUE = 'SETTINGS/VALIDATE-VALUE'\n\n// Display mode\nexport const SET_INTERFACE_MODE = 'DISPLAY/SET-INTERFACE-MODE'\nexport const SET_COUNT = 'DISPLAY/SET-COUNT'\nexport const INCREMENT_COUNT = 'DISPLAY/INCREMENT-COUNT'\n\n","import * as types from '../types/counter'\nimport { CounterActionTypes } from '../actions/counter'\n\nexport type CounterStateType = {\n    minValue: string\n    maxValue: string\n    count: string\n    errorMessage: string\n    interfaceMode: 'display' | 'settings'\n}\n\nconst initialState: CounterStateType = {\n    minValue: localStorage.getItem('minValue') as string || '0',\n    maxValue: localStorage.getItem('maxValue') as string || '5',\n    count: localStorage.getItem('minValue') || '0',\n    errorMessage: '',\n    interfaceMode: 'display',\n}\n\nexport const counterReducer = (state = initialState, action: CounterActionTypes): CounterStateType => {\n    switch (action.type) {\n        case types.SET_MIN_VALUE: {\n            const { minValue } = action.payload\n            return { ...state, minValue }\n        }\n        case types.SET_MAX_VALUE: {\n            const { maxValue } = action.payload\n            return { ...state, maxValue }\n        }\n        case types.SAVE_SETTINGS: {\n            localStorage.setItem('minValue', state.minValue)\n            localStorage.setItem('maxValue', state.maxValue)\n            return { ...state }\n        }\n        case types.SET_ERROR_MESSAGE: {\n            const { errorMessage } = action.payload\n            return { ...state, errorMessage }\n        }\n        case types.CLEAR_ERROR_MESSAGE: {\n            return {\n                ...state,\n                errorMessage: '',\n            }\n        }\n        case types.SET_INTERFACE_MODE: {\n            return {\n                ...state,\n                interfaceMode: state.interfaceMode === 'display' ? 'settings' : 'display',\n            }\n        }\n        case types.SET_COUNT: {\n            return {\n                ...state,\n                count: state.minValue,\n            }\n        }\n        case types.INCREMENT_COUNT: {\n            return {\n                ...state,\n                count: (+state.count + 1).toString(),\n            }\n        }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { counterReducer } from './counter'\n\nexport default combineReducers({\n    counter: counterReducer,\n})","import * as types from '../types/counter'\n\ntype SetMinValueType = ReturnType<typeof setMinValue>\ntype SetMaxValueType = ReturnType<typeof setMaxValue>\ntype SaveSettingsType = ReturnType<typeof saveSettings>\ntype SetErrorMessageType = ReturnType<typeof setErrorMessage>\ntype ClearErrorMessageType = ReturnType<typeof clearErrorMessage>\ntype ValidateValueType = ReturnType<typeof validateValue>\ntype SetInterfaceModeType = ReturnType<typeof setInterfaceMode>\ntype SetCountType = ReturnType<typeof setCount>\ntype IncrementCountType = ReturnType<typeof incrementCount>\n\nexport type CounterActionTypes =\n    SetMinValueType | SetMaxValueType | SaveSettingsType | SetErrorMessageType\n    | ClearErrorMessageType | ValidateValueType | SetInterfaceModeType | SetCountType | IncrementCountType\n\ntype ValuesType = { [ key: string ]: string }\ntype ValidateType = {\n    value: string,\n    name: string\n}\n\n// Settings actions\nexport const setMinValue = ({ minValue }: ValuesType) => ({\n    type: types.SET_MIN_VALUE,\n    payload: { minValue },\n} as const)\n\nexport const setMaxValue = ({ maxValue }: ValuesType) => ({\n    type: types.SET_MAX_VALUE,\n    payload: { maxValue },\n} as const)\n\nexport const saveSettings = () => ({\n    type: types.SAVE_SETTINGS,\n} as const)\n\nexport const setErrorMessage = ({ errorMessage }: ValuesType) => ({\n    type: types.SET_ERROR_MESSAGE,\n    payload: { errorMessage },\n} as const)\n\nexport const clearErrorMessage = () => ({\n    type: types.CLEAR_ERROR_MESSAGE,\n} as const)\n\nexport const validateValue = ({ value, name }: ValidateType) => ({\n    type: types.VALIDATE_VALUE,\n    payload: { value, name },\n} as const)\n\n// Display actions\nexport const setInterfaceMode = () => ({\n    type: types.SET_INTERFACE_MODE,\n} as const)\n\nexport const setCount = () => ({\n    type: types.SET_COUNT,\n} as const)\n\nexport const incrementCount = () => ({\n    type: types.INCREMENT_COUNT,\n} as const)","import * as actions from '../actions/counter'\nimport { CounterActionTypes } from '../actions/counter'\nimport { VALIDATE_VALUE } from '../types/counter'\n\ntype ValidateValueReturnType = {\n    newMinValue: string\n    newMaxValue: string\n    errorMessage: string\n}\n\ntype ValidateValueType = {\n    value: string\n    name: string\n    maxValue: string\n    minValue: string\n}\n\nconst errorMessages = {\n    notNumber: 'value must be positive integer number',\n    positiveNumber: 'value must be positive integer or 0',\n    minNotHigherThanMax: 'min value must be less than max value',\n    maxNotLessThanMin: 'max value must be more than min value',\n}\n\nexport const validationMiddleware = (store: any) => (next: any) => (action: CounterActionTypes): CounterActionTypes => {\n    switch (action.type) {\n        case VALIDATE_VALUE: {\n            next(actions.clearErrorMessage())\n            const { name, value } = action.payload\n            const { minValue, maxValue } = store.getState().counter\n            const { newMinValue, newMaxValue, errorMessage } = validateValue({\n                value: value, name: name, maxValue: maxValue, minValue: minValue,\n            })\n            if (errorMessage) return next(actions.setErrorMessage({ errorMessage: errorMessage }))\n            return newMinValue\n                ? next(actions.setMinValue({ minValue: newMinValue }))\n                : next(actions.setMaxValue({ maxValue: newMaxValue }))\n        }\n        default:\n            return next(action)\n    }\n}\n\nconst validateValue = ({ value, name, maxValue, minValue }: ValidateValueType): ValidateValueReturnType => {\n    const number = parseInt(value)\n    if (isNaN(number))\n        return { newMinValue: '', newMaxValue: '', errorMessage: errorMessages.notNumber }\n    else if (number < 0)\n        return { newMinValue: '', newMaxValue: '', errorMessage: errorMessages.positiveNumber }\n    if (name === 'min value') {\n        return number < +maxValue\n            ? { newMinValue: number.toString(), newMaxValue: '', errorMessage: '' }\n            : { newMinValue: '', newMaxValue: '', errorMessage: errorMessages.minNotHigherThanMax }\n    } else {\n        return number > +minValue\n            ? { newMinValue: '', newMaxValue: number.toString(), errorMessage: '' }\n            : { newMinValue: '', newMaxValue: '', errorMessage: errorMessages.maxNotLessThanMin }\n\n    }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport rootReducers from './reducers'\nimport { useDispatch } from 'react-redux'\nimport { validationMiddleware } from './middlewares/counter'\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n\nexport const store = createStore(rootReducers, applyMiddleware(validationMiddleware))","import { RootStateType } from '../index'\n\nexport const counterSelector = (state: RootStateType) => state.counter\nexport const minValueSelector = (state: RootStateType) => state.counter.minValue\nexport const maxValueSelector = (state: RootStateType) => state.counter.maxValue\nexport const countSelector = (state: RootStateType) => state.counter.count\nexport const interfaceModeSelector = (state: RootStateType) => state.counter.interfaceMode\nexport const errorMessageSelector = (state: RootStateType) => state.counter.errorMessage","import React from 'react'\nimport s from './CountMode.module.css'\nimport { counterSelector } from '../../../store/selectors/counter'\nimport { useSelector } from 'react-redux'\n\nexport const CountMode = React.memo(() => {\n\n    const { count, maxValue } = useSelector(counterSelector)\n    const mode = +count < +maxValue ? 'count' : 'redCount'\n    return (\n        <p className={ s[ `${ mode }` ] }>{ count }</p>\n    )\n})","import React from 'react'\nimport s from './ErrorMessage.module.css'\nimport { useSelector } from 'react-redux'\nimport { errorMessageSelector } from '../../../../store/selectors/counter'\n\nexport const ErrorMessage = React.memo(() => {\n    const errorMessage = useSelector(errorMessageSelector)\n    return <p className={ s.errorMessage }>{ errorMessage }</p>\n})","import React, { ChangeEvent } from 'react'\nimport s from './SettingsMode.module.css'\nimport { ErrorMessage } from './ErrorMessage/ErrorMessage'\nimport { useSelector } from 'react-redux'\nimport { counterSelector } from '../../../store/selectors/counter'\nimport * as actions from '../../../store/actions/counter'\nimport { useAppDispatch } from '../../../store'\n\nexport const SettingsMode = React.memo(() => {\n    const dispatch = useAppDispatch()\n    const { minValue, maxValue, errorMessage } = useSelector(counterSelector)\n    const inputClass = errorMessage ? s.inputError : s.inputCorrect\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\n        const action = actions.validateValue({ value: e.currentTarget.value, name: e.currentTarget.name })\n        dispatch(action)\n    }\n\n    return (\n        <>\n            <form className={ s.settingsContainer }>\n                <label\n                    className={ s.label }\n                    htmlFor={ 'min value' }\n                >Min value:\n                </label>\n                <input\n                    className={ [s.input, inputClass].join(' ') }\n                    name={ 'min value' }\n                    type={ 'number' }\n                    value={ minValue }\n                    onChange={ changeValue }\n                />\n                <label\n                    className={ s.label }\n                    htmlFor={ 'min value' }\n                >Max value:\n                </label>\n                <input\n                    className={ [s.input, inputClass].join(' ') }\n                    name={ 'max value' }\n                    type={ 'number' }\n                    value={ maxValue }\n                    onChange={ changeValue }\n                />\n            </form>\n            <ErrorMessage/>\n        </>\n    )\n})","import React from 'react'\nimport s from './Display.module.css'\nimport { CountMode } from './CountMode/CountMode'\nimport { SettingsMode } from './SettingsMode/SettingsMode'\nimport { useSelector } from 'react-redux'\nimport { interfaceModeSelector } from '../../store/selectors/counter'\n\nexport const Display = React.memo(() => {\n    const interfaceMode = useSelector(interfaceModeSelector)\n\n    return (\n        <div className={ s.displayContainer }>\n            { interfaceMode === 'display'\n                ? <CountMode/>\n                : <SettingsMode/>\n            }\n        </div>\n    )\n})","import React from 'react'\nimport s from './Button.module.css'\nimport { useSelector } from 'react-redux'\nimport { interfaceModeSelector } from '../../store/selectors/counter'\n\ntype ButtonTypes = {\n    type: 'inc' | 'reset' | 'set'\n    isDisabled: boolean\n    incrementCountCallback?: () => void\n    setCountCallback?: () => void\n    setInterfaceModeCallback?: () => void\n    saveSettingsToLocalStorageCallback?: () => void\n}\n\nexport const Button: React.FC<ButtonTypes> = React.memo((\n    {\n        type, isDisabled, setCountCallback,\n        incrementCountCallback, setInterfaceModeCallback,\n        saveSettingsToLocalStorageCallback,\n    }) => {\n    const interfaceMode = useSelector(interfaceModeSelector)\n    let mode = (isDisabled) ? 'disabled' : 'active'\n\n    const onClick = () => {\n        incrementCountCallback && incrementCountCallback()\n        setCountCallback && setCountCallback()\n        if (interfaceMode === 'settings') {\n            saveSettingsToLocalStorageCallback && saveSettingsToLocalStorageCallback()\n            setCountCallback && setCountCallback()\n        }\n        setInterfaceModeCallback && setInterfaceModeCallback()\n    }\n\n    return (\n        <button\n            className={ [s.buttonCommon, s[ `${ mode }` ]].join(' ') }\n            onClick={ onClick }\n            disabled={ isDisabled }\n        >\n            { type }\n        </button>\n    )\n})","import React from 'react'\nimport { Button } from '../../Button/Button'\nimport { useSelector } from 'react-redux'\nimport { errorMessageSelector } from '../../../store/selectors/counter'\nimport { useAppDispatch } from '../../../store'\nimport * as actions from '../../../store/actions/counter'\n\n\nexport const SettingsButton = React.memo(() => {\n    const dispatch = useAppDispatch()\n    const errorMessage = useSelector(errorMessageSelector)\n    const setInterfaceModeCallback = () => dispatch(actions.setInterfaceMode())\n    const saveSettingsToLocalStorageCallback = () => dispatch(actions.saveSettings())\n    const setCountCallback = () => dispatch(actions.setCount())\n\n    return (\n        <Button\n            type={ 'set' }\n            isDisabled={ !!errorMessage?.length }\n            setInterfaceModeCallback={ setInterfaceModeCallback }\n            saveSettingsToLocalStorageCallback={ saveSettingsToLocalStorageCallback }\n            setCountCallback={ setCountCallback }\n        />\n    )\n})","import React from 'react'\nimport { Button } from '../../Button/Button'\nimport { useSelector } from 'react-redux'\nimport { counterSelector } from '../../../store/selectors/counter'\nimport { useAppDispatch } from '../../../store'\nimport * as actions from '../../../store/actions/counter'\n\nexport const CounterButtons = React.memo(() => {\n    const dispatch = useAppDispatch()\n    const { count, minValue, maxValue } = useSelector(counterSelector)\n    const incrementCountCallback = () => dispatch(actions.incrementCount())\n    const setCountCallback = () => dispatch(actions.setCount())\n    return (\n        <>\n            <Button\n                type={ 'inc' }\n                isDisabled={ count === maxValue }\n                incrementCountCallback={ incrementCountCallback }\n            />\n            <Button\n                type={ 'reset' }\n                isDisabled={ count === minValue }\n                setCountCallback={ setCountCallback }\n            />\n        </>\n    )\n})","import React from 'react'\nimport s from './ButtonGroup.module.css'\nimport { SettingsButton } from './SettingsButton/SettingsButton'\nimport { CounterButtons } from './CounterButton/CounterButtons'\nimport { useSelector } from 'react-redux'\nimport { interfaceModeSelector } from '../../store/selectors/counter'\n\nexport const ButtonGroup = React.memo(() => {\n    const interfaceMode = useSelector(interfaceModeSelector)\n\n    return (\n        <div className={ s.buttonsContainer }>\n            {\n                interfaceMode === 'display'\n                    ? <CounterButtons/> : null\n            }\n            <SettingsButton/>\n        </div>\n    )\n})","import React from 'react'\nimport { Display } from '../Display/Dispaly'\nimport s from './Counter.module.css'\nimport { ButtonGroup } from '../ButtonGroup/ButtonGroup'\n\nexport const Counter = React.memo(() => {\n    return (\n        <div className={ s.counterContainer }>\n            <Display/>\n            <ButtonGroup/>\n        </div>\n    )\n})","import React from 'react'\nimport { Counter } from './components/Counter/Counter'\nimport s from './App.module.css'\n\nexport const App = React.memo(() => {\n    return (\n        <div className={ s.appContainer }>\n            <Counter/>\n        </div>\n    )\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { store } from './store'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}