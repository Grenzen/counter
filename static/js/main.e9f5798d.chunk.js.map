{"version":3,"sources":["components/Display/Display.module.css","components/Button/Button.module.css","components/Counter/Counter.module.css","App.module.css","components/Display/Dispaly.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","count","mode","maxValue","className","s","display","Button","type","text","setCountCallback","minValue","buttonCommon","join","onClick","disabled","Counter","counterContainer","buttonsContainer","App","useState","setCount","appContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,SAAW,4B,gBCA/FD,EAAOC,QAAU,CAAC,aAAe,6BAA6B,OAAS,uBAAuB,SAAW,2B,gBCAzGD,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,iBAAmB,oC,iBCA1FD,EAAOC,QAAU,CAAC,aAAe,4B,sICQpBC,EAAiC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAEvCC,EAAOD,EAFsD,EAAfE,SAEpB,QAAU,WAE1C,OACI,qBAAKC,UAAYC,IAAEC,QAAnB,SACI,mBAAGF,UAAYC,IAAE,GAAD,OAAKH,IAArB,SAAkCD,O,gBCHjCM,EAAgC,SAAC,GAQnC,IANHN,EAME,EANFA,MACAO,EAKE,EALFA,KACAC,EAIE,EAJFA,KACAC,EAGE,EAHFA,iBACAC,EAEE,EAFFA,SACAR,EACE,EADFA,SAEAD,EAAQD,EAAQU,GAAqB,UAATH,GAC3BP,EAAQE,GAAqB,QAATK,EAD2B,SACE,WActD,OACI,wBACIJ,UAAY,CAACC,IAAEO,aAAcP,IAAE,GAAD,OAAKH,KAAUW,KAAK,KAClDC,QAde,WACnB,OAAQN,GACJ,IAAK,MACDE,IAAmBT,GACnB,MACJ,IAAK,QACDS,EAAiBC,KASrBI,SAAoB,aAATb,EAHf,SAKMO,K,gBC7BDO,EAAiC,SAAC,GAAqD,IAAnDf,EAAkD,EAAlDA,MAAOS,EAA2C,EAA3CA,iBAAkBC,EAAyB,EAAzBA,SAAUR,EAAe,EAAfA,SAChF,OACI,sBAAKC,UAAYC,IAAEY,iBAAnB,UACI,cAAC,EAAD,CACIhB,MAAQA,EACRE,SAAWA,IAEf,sBAAKC,UAAYC,IAAEa,iBAAnB,UACI,cAAC,EAAD,CACIT,KAAO,MACPD,KAAO,MACPP,MAAQA,EACRS,iBAAmBA,EACnBC,SAAWA,EACXR,SAAWA,IACf,cAAC,EAAD,CACIM,KAAO,QACPD,KAAO,QACPP,MAAQA,EACRS,iBAAmBA,EACnBC,SAAWA,EACXR,SAAWA,W,gBCzBlBgB,EAAyB,SAAC,GAA4B,IAA1BR,EAAyB,EAAzBA,SAAUR,EAAe,EAAfA,SAAe,EACtCiB,mBAAiBT,GADqB,mBACzDV,EADyD,KAClDoB,EADkD,KAEhE,OACI,qBAAKjB,UAAYC,IAAEiB,aAAnB,SACE,cAAC,EAAD,CAASrB,MAAQA,EAAQS,iBAAmBW,EAAYV,SAAWA,EAAWR,SAAWA,OCClFoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKvB,SALQ,EAKYR,SAJZ,MAMfgC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9f5798d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2n21m\",\"count\":\"Display_count__2_y4v\",\"redCount\":\"Display_redCount__1QIFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonCommon\":\"Button_buttonCommon__3HvzX\",\"active\":\"Button_active__TCjlx\",\"disabled\":\"Button_disabled__2c3jr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__1qHAn\",\"buttonsContainer\":\"Counter_buttonsContainer__1OOUz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__3jRx1\"};","import React from 'react'\nimport s from './Display.module.css'\n\ntype DisplayTypes = {\n    count: number\n    maxValue: number\n}\n\n\nexport const Display:React.FC<DisplayTypes> = ({ count, maxValue }) => {\n\n    const mode = count < maxValue ? 'count' : 'redCount'\n\n    return (\n        <div className={ s.display }>\n            <p className={ s[`${ mode }`] }>{ count }</p>\n        </div>\n    )\n}","import React from 'react'\nimport s from './Button.module.css'\n\ntype ButtonTypes = {\n    type: 'inc' | 'reset'\n    text: string\n    count: number\n    setCountCallback: (count: number) => void\n    minValue: number\n    maxValue: number\n}\n\nexport const Button: React.FC<ButtonTypes> = (\n    {\n        count,\n        type,\n        text,\n        setCountCallback,\n        minValue,\n        maxValue\n    }) => {\n    let mode = (count > minValue && type === 'reset') ? 'active' :\n        (count < maxValue && type === 'inc') ? 'active' : 'disabled'\n\n\n    const onClickHandler = () => {\n        switch (type) {\n            case 'inc':\n                setCountCallback(++count)\n                break\n            case 'reset':\n                setCountCallback(minValue)\n                break\n        }\n    }\n\n    return (\n        <button\n            className={ [s.buttonCommon, s[`${ mode }`]].join(' ') }\n            onClick={ onClickHandler }\n            disabled={ mode === 'disabled' }\n        >\n            { text }\n        </button>\n    )\n}","import React from 'react'\nimport { Display } from '../Display/Dispaly'\nimport { Button } from '../Button/Button'\nimport s from './Counter.module.css'\n\ntype CounterTypes = {\n    count: number\n    setCountCallback: (count: number) => void\n    minValue: number\n    maxValue: number\n}\n\n\nexport const Counter:React.FC<CounterTypes> = ({ count, setCountCallback, minValue, maxValue }) => {\n    return (\n        <div className={ s.counterContainer }>\n            <Display\n                count={ count }\n                maxValue={ maxValue }\n            />\n            <div className={ s.buttonsContainer }>\n                <Button\n                    text={ 'inc' }\n                    type={ 'inc' }\n                    count={ count }\n                    setCountCallback={ setCountCallback }\n                    minValue={ minValue }\n                    maxValue={ maxValue } />\n                <Button\n                    text={ 'reset' }\n                    type={ 'reset' }\n                    count={ count }\n                    setCountCallback={ setCountCallback }\n                    minValue={ minValue }\n                    maxValue={ maxValue } />\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Counter } from './components/Counter/Counter'\nimport s from './App.module.css'\n\ntype AppProps = {\n    minValue: number\n    maxValue: number\n}\n\nexport const App:React.FC<AppProps> = ({ minValue, maxValue }) => {\n  const [count, setCount] = useState<number>(minValue)\n  return (\n      <div className={ s.appContainer }>\n        <Counter count={ count } setCountCallback={ setCount }  minValue={ minValue } maxValue={ maxValue } />\n      </div>\n  )\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst minValue = 0\nconst maxValue = 5\n\nReactDOM.render(\n  <React.StrictMode>\n    <App minValue={minValue} maxValue={maxValue} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}