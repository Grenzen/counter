{"version":3,"sources":["components/Display/SettingsMode/SettingsMode.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/Display/CountMode/CountMode.module.css","components/Display/SettingsMode/ErrorMessage/ErrorMessage.module.css","components/Counter/Counter.module.css","components/ButtonGroup/ButtonGroup.module.css","App.module.css","components/Display/CountMode/CountMode.tsx","components/Display/SettingsMode/ErrorMessage/ErrorMessage.tsx","components/Display/SettingsMode/SettingsMode.tsx","components/Display/Dispaly.tsx","components/Button/Button.tsx","components/ButtonGroup/SettingsButton/SettingsButton.tsx","components/ButtonGroup/CounterButton/CounterButton.tsx","components/ButtonGroup/ButtonGroup.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CountMode","count","mode","maxValue","className","s","ErrorMessage","message","errorMessage","SettingsMode","minValue","error","changeValuesInSettingsCallback","inputClass","length","inputError","inputCorrect","changeValue","e","currentTarget","settingsContainer","label","htmlFor","input","join","name","type","value","onChange","Display","interfaceMode","displayContainer","Button","changeCountAndStorageCallback","disabled","buttonCommon","onClick","SettingsButton","CounterButton","ButtonGroup","buttonsContainer","Counter","counterContainer","App","startMinValue","startMaxValue","minData","sessionStorage","getItem","maxData","useState","setMinValue","setMaxValue","setCount","setError","setInterfaceMode","appContainer","setItem","setStorage","pureChangeInterfaceMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84b09e38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsMode_settingsContainer__3GSCk\",\"label\":\"SettingsMode_label__1fYMT\",\"input\":\"SettingsMode_input__NfgTE\",\"inputCorrect\":\"SettingsMode_inputCorrect__sXSQd\",\"inputError\":\"SettingsMode_inputError__3sglA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonCommon\":\"Button_buttonCommon__3HvzX\",\"active\":\"Button_active__TCjlx\",\"disabled\":\"Button_disabled__2c3jr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"Display_displayContainer__3YmLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"CountMode_count__YIeeu\",\"redCount\":\"CountMode_redCount__2OfuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__1oR2b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterContainer\":\"Counter_counterContainer__1qHAn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"ButtonGroup_buttonsContainer__1G_1Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__3jRx1\"};","import React from 'react'\nimport s from './CountMode.module.css'\n\ntype CountModeType = {\n    count: number\n    maxValue: number\n}\n\nexport const CountMode: React.FC<CountModeType> = ({ count, maxValue }) => {\n    const mode = count < maxValue ? 'count' : 'redCount'\n    return (\n        <p className={ s[ `${ mode }` ] }>{ count }</p>\n    )\n}","import React from 'react'\nimport s from './ErrorMessage.module.css'\n\ntype ErrorMessageType = {\n    message: string\n}\n\nexport const ErrorMessage: React.FC<ErrorMessageType> = ({ message }) => {\n    return <p className={ s.errorMessage }>{ message }</p>\n}","import React, { ChangeEvent } from 'react'\nimport s from './SettingsMode.module.css'\nimport { ErrorMessage } from './ErrorMessage/ErrorMessage'\n\ntype SettingsModeType = {\n    minValue: number\n    maxValue: number\n    error: string\n    changeValuesInSettingsCallback: (input: HTMLInputElement) => void\n}\n\nexport const SettingsMode: React.FC<SettingsModeType> = (\n    {\n        minValue, maxValue, error, changeValuesInSettingsCallback,\n    }) => {\n    \n    const inputClass = error.length ? s.inputError : s.inputCorrect\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => changeValuesInSettingsCallback(e.currentTarget)\n\n    return (\n        <>\n            <form className={ s.settingsContainer }>\n                <label\n                    className={ s.label }\n                    htmlFor={ 'min value' }\n                >Min value:\n                </label>\n                <input\n                    className={ [s.input, inputClass].join(' ') }\n                    name={ 'min value' }\n                    type={ 'number' }\n                    value={ minValue }\n                    onChange={ changeValue }\n                />\n                <label\n                    className={ s.label }\n                    htmlFor={ 'min value' }\n                >Max value:\n                </label>\n                <input\n                    className={ [s.input, inputClass].join(' ') }\n                    name={ 'max value' }\n                    type={ 'number' }\n                    value={ maxValue }\n                    onChange={ changeValue }\n                />\n            </form>\n            <ErrorMessage message={ error }/>\n        </>\n    )\n}","import React from 'react'\nimport s from './Display.module.css'\nimport { InterfaceType } from '../../App'\nimport { CountMode } from './CountMode/CountMode'\nimport { SettingsMode } from './SettingsMode/SettingsMode'\n\ntype DisplayTypes = {\n    count: number\n    minValue: number\n    maxValue: number\n    interfaceMode: InterfaceType\n    error: string\n    changeValuesInSettingsCallback: (input: HTMLInputElement) => void\n\n}\n\n\nexport const Display: React.FC<DisplayTypes> = (\n    {\n        count, maxValue, minValue,\n        interfaceMode, error, changeValuesInSettingsCallback,\n    }) => {\n\n    return (\n        <div className={ s.displayContainer }>\n            { interfaceMode === 'counter'\n                ? <CountMode\n                    count={ count }\n                    maxValue={ maxValue }\n                />\n                : <SettingsMode\n                    minValue={ minValue }\n                    maxValue={ maxValue }\n                    error={ error }\n                    changeValuesInSettingsCallback={ changeValuesInSettingsCallback }\n                />\n            }\n        </div>\n    )\n}","import React from 'react'\nimport s from './Button.module.css'\n\ntype ButtonTypes = {\n    type: 'inc' | 'reset' | 'set'\n    disabled?: boolean\n    count: number\n    minValue: number\n    maxValue: number\n    changeCountAndStorageCallback: (type: string) => void\n}\n\nexport const Button: React.FC<ButtonTypes> = (\n    {\n        count, type,\n        changeCountAndStorageCallback,\n        minValue, maxValue, disabled,\n\n    }) => {\n    let mode = (count > minValue && type === 'reset') ? 'active' :\n        (count < maxValue && type === 'inc') ? 'active' :\n            (type === 'set' && !disabled) ? 'active' : 'disabled'\n\n\n    const onClickHandler = () => changeCountAndStorageCallback(type)\n\n    return (\n        <button\n            className={ [s.buttonCommon, s[ `${ mode }` ]].join(' ') }\n            onClick={ onClickHandler }\n            disabled={ mode === 'disabled' }\n        >\n            { type }\n        </button>\n    )\n}","import React from 'react'\nimport { Button } from '../../Button/Button'\n\ntype SettingsButtonType = {\n    count: number\n    error: string\n    minValue: number\n    maxValue: number\n    changeCountAndStorageCallback: (type: string) => void\n}\n\nexport const SettingsButton: React.FC<SettingsButtonType> = (\n    {\n        count,\n        minValue, maxValue,\n        error, changeCountAndStorageCallback\n    }) => {\n    return (\n        <Button\n            type={ 'set' }\n            disabled={ !!error?.length }\n            count={ count }\n            minValue={ minValue }\n            maxValue={ maxValue }\n            changeCountAndStorageCallback={ changeCountAndStorageCallback }\n        />\n    )\n}","import React from 'react'\nimport { Button } from '../../Button/Button'\nimport { SettingsButton } from '../SettingsButton/SettingsButton'\n\ntype CounterButtonType = {\n    count: number\n    minValue: number\n    maxValue: number\n    changeCountAndStorageCallback: (type: string) => void\n}\n\nexport const CounterButton: React.FC<CounterButtonType> = (\n    {\n        count,\n        minValue, maxValue,\n        changeCountAndStorageCallback\n    }) => {\n    return (\n        <>\n            <Button\n                type={ 'inc' }\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                changeCountAndStorageCallback={ changeCountAndStorageCallback }\n            />\n            <Button\n                type={ 'reset' }\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                changeCountAndStorageCallback={ changeCountAndStorageCallback }\n            />\n        </>\n    )\n}","import React from 'react'\nimport { InterfaceType } from '../../App'\nimport s from './ButtonGroup.module.css'\nimport { SettingsButton } from './SettingsButton/SettingsButton'\nimport { CounterButton } from './CounterButton/CounterButton'\n\ntype ButtonGroupType = {\n    interfaceMode: InterfaceType\n    count: number\n    error: string\n    minValue: number\n    maxValue: number\n    changeCountAndStorageCallback: (type: string) => void\n}\n\nexport const ButtonGroup: React.FC<ButtonGroupType> = (\n    {\n        interfaceMode, count, error,\n        minValue, maxValue,\n        changeCountAndStorageCallback\n    }) => {\n    return (\n        <div className={ s.buttonsContainer }>\n            {\n                interfaceMode === 'counter'\n                    ? <CounterButton\n                        count={ count }\n                        minValue={ minValue }\n                        maxValue={ maxValue }\n                        changeCountAndStorageCallback={ changeCountAndStorageCallback }\n                    /> : null\n            }\n            <SettingsButton\n                error={ error }\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                changeCountAndStorageCallback={ changeCountAndStorageCallback }\n            />\n\n        </div>\n    )\n}","import React from 'react'\nimport { Display } from '../Display/Dispaly'\nimport s from './Counter.module.css'\nimport { InterfaceType } from '../../App'\nimport { ButtonGroup } from '../ButtonGroup/ButtonGroup'\n\ntype CounterTypes = {\n    count: number\n    minValue: number\n    maxValue: number\n    interfaceMode: InterfaceType\n    error: string\n    changeCountAndStorageCallback: (type: string) => void\n    changeValuesInSettingsCallback: (input: HTMLInputElement) => void\n}\n\n\nexport const Counter: React.FC<CounterTypes> = (\n    {\n        count, minValue, maxValue,\n        interfaceMode, error,\n        changeCountAndStorageCallback,\n        changeValuesInSettingsCallback,\n    }) => {\n    return (\n        <div className={ s.counterContainer }>\n            <Display\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                interfaceMode={ interfaceMode }\n                error={ error }\n                changeValuesInSettingsCallback={ changeValuesInSettingsCallback }\n            />\n            <ButtonGroup\n                interfaceMode={ interfaceMode }\n                count={ count }\n                error={ error }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                changeCountAndStorageCallback={ changeCountAndStorageCallback }\n            />\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { Counter } from './components/Counter/Counter'\nimport s from './App.module.css'\n\ntype AppProps = {\n    startMinValue: number\n    startMaxValue: number\n}\n\nexport type InterfaceType = 'counter' | 'settings'\n\n// Pure Functions\nexport const pureChangeInterfaceMode = (interfaceMode: InterfaceType): InterfaceType => {\n    return interfaceMode === 'counter' ? 'settings' : 'counter'\n}\n\nexport const setStorage = (minValue:number, maxValue:number): void => {\n    sessionStorage.setItem('minValue', `${ minValue }`)\n    sessionStorage.setItem('maxValue', `${ maxValue }`)\n}\n\nexport const App: React.FC<AppProps> = ({ startMinValue, startMaxValue }) => {\n    let minData = sessionStorage.getItem('minValue')\n        ? sessionStorage.getItem('minValue') as string : startMinValue\n    let maxData = sessionStorage.getItem('maxValue')\n        ? sessionStorage.getItem('maxValue') as string : startMaxValue\n\n    const [minValue, setMinValue] = useState<number>(+minData)\n    const [maxValue, setMaxValue] = useState<number>(+maxData)\n    const [count, setCount] = useState<number>(minValue)\n    const [error, setError] = useState<string>('')\n    const [interfaceMode, setInterfaceMode] = useState<InterfaceType>('counter')\n\n    // BLL\n    const changeValuesInSettings = (input: HTMLInputElement) => {\n        setError('')\n        if (+input.value < 0) {\n            setError(`${ input.name } must be positive or 0`)\n            return\n        }\n        switch (input.name) {\n            case 'min value':\n                +input.value < maxValue\n                    ? setMinValue(+input.value)\n                    : setError(`${ input.name } must be less than ${ maxValue }`)\n                break\n            case 'max value':\n                +input.value > minValue\n                    ? setMaxValue(+input.value)\n                    : setError(`${ input.name } must be more than ${ minValue }`)\n                break\n        }\n    }\n    const changeInterfaceMode = () => setInterfaceMode(pureChangeInterfaceMode(interfaceMode))\n\n    const changeCountAndStorage = (type: string) => {\n        switch (type) {\n            case 'inc':\n                setCount(() => count + 1)\n                break\n            case 'reset':\n                setCount(() => minValue)\n                break\n            case 'set':\n                if (interfaceMode === 'settings') {\n                    setCount(minValue)\n                    setStorage(minValue, maxValue)\n                }\n                changeInterfaceMode()\n                break\n        }\n    }\n\n    return (\n        <div className={ s.appContainer }>\n            <Counter\n                count={ count }\n                minValue={ minValue }\n                maxValue={ maxValue }\n                interfaceMode={ interfaceMode }\n                error={ error }\n                changeCountAndStorageCallback={ changeCountAndStorage }\n                changeValuesInSettingsCallback={ changeValuesInSettings }\n            />\n        </div>\n    )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nexport const minValue = 0\nexport const maxValue = 5\n\nReactDOM.render(\n    <React.StrictMode>\n        <App startMinValue={ minValue } startMaxValue={ maxValue }/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}